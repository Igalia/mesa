ACO TODOs

Refactorings (High priority for upstreaming)
- nir_opt_sink(): should either be merged with nir_opt_move_load_ubo() or be done more generic (also avoid loops)
- nir_lower_io_explicit(): cleanup and comment
- nir_opt_load_store_vectorize(): cleanup and comment
- nir_divergence_analysis(): cleanup
- nir_to_lcssa(): -
- radv: cleanup changes / remove 'compiletime' and aco as default
- aco: make code style consistent
- aco/scheduler: make SMEM/VMEM use the same function (lower priority)


Features:
- implement other shader stages
    - VS without GS/TES/TCS is mostly implemented in the branch "backend-vs"
        - doesn't work with everything (e.g. Dota 2)
        - register usage is very high, probably needs some kind of scheduling/code motion
- implement missing features for games or just CTS

Fixes:
- p_parallelcopy clobbers scc when swapping sgprs
- XNACK replay is broken
- because they use different caches, mixed SMEM/VMEM SSBO loads/stores are broken
    - for example: a SMEM store and later a VMEM load of the same SSBO

Optimizations:
- optimize V_OR3_B32/V_AND_OR_B32/V_LSHL_ADD_U32/etc (VEGA)
- optimize sub-dword-addressing (SDWA) e.g. for unpack_*
- optimize boolean arithmetic
	- currently, we just pick the scc bit as dst.
	- if the scc bit is to be overwritten, it get's copied to a different sgpr.
	- instead, we could (sometimes) directly use the sgpr from the arithmetic instruction
- optimize iand(feq(a,a),fne(0,a)) and friends to v_cmp_class instructions
- lower to CSSA (done, but currently increases code size, wait for negative affinities/jump threading)
	- idea from the paper "Revisiting Out-of-SSA Translation for Correctness, CodeQuality, and Efficiency"
	- it is necessary to lower to CSSA for correctness wrt spilling (we don't have mem-to-mem moves)
	- also, it can enable much better jump threading by keeping empty blocks empty
	- needs fix for linear phis due to control flow refactoring
- rework register coalescing to also use negative affinities (hard problem)
- GCM/LICM
	- long-term-goal is global code motion with register contraints
	- a good heuristic might do fine, but unrestricted GCM can do more harm than good
	- we might also want some kind of Sethi-Ulman sequencing to lower register usage even further
- Spilling/Rematerialization
	- currently, we only spill sgprs, and sometimes even const values
	- it might be beneficial to spill if it helps to squeeze in an additional wave (we can easily test different thresholds here)
- the RA should avoid moving temporaries that are created by VMEM/SMEM/DS instructions if they haven't yet been used
- don't always try to keep vectors intact during RA
    - often, a vector will only ever be split. so, when moving, it makes little sense to create extra moves when only a some of it's elements needs to be moved
    - if this is always done, the number of moves required should always be less than the amount of space required
- schedule discard_if
- speed up compiletime:
	- make std::vector<std::unique_ptr<Block>> only std::vector<Block> (remark: we need forward pointers/indices while isel)
	- make aco_ptr<Instruction> containing the Format, Opcode, num_operands, num_definitions + unique_ptr to specific data
- tweak loop unrolling factors

NIR TODOs
- pointer analysis / alias analysis
	- we really want to schedule independent memory operations
	- also needed as proof per SMEM ssbo loads/stores
- ABI lowering for future hardware and maybe in very far future radeonSI
- dead control flow elimination (discards & null exports)
